// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: chatHistories.sql

package pokedex

import (
	"context"

	"github.com/google/uuid"
)

const getAllChatsForUserAndPokemon = `-- name: GetAllChatsForUserAndPokemon :many
SELECT
  ch.sender,
  ch.message
FROM chat_histories ch
INNER JOIN chats c ON ch.chat_id = c.id
INNER JOIN user_pokemons up ON c.user_pokemon_id = up.id
WHERE up.user_id = $1
  AND up.pokemon_id = $2
ORDER BY ch.created_at ASC
`

type GetAllChatsForUserAndPokemonParams struct {
	UserID    uuid.UUID
	PokemonID int32
}

type GetAllChatsForUserAndPokemonRow struct {
	Sender  string
	Message string
}

func (q *Queries) GetAllChatsForUserAndPokemon(ctx context.Context, arg GetAllChatsForUserAndPokemonParams) ([]GetAllChatsForUserAndPokemonRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllChatsForUserAndPokemon, arg.UserID, arg.PokemonID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllChatsForUserAndPokemonRow
	for rows.Next() {
		var i GetAllChatsForUserAndPokemonRow
		if err := rows.Scan(&i.Sender, &i.Message); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertChatHistory = `-- name: InsertChatHistory :exec
INSERT INTO chat_histories
  (id, chat_id, sender, message)
SELECT
  $1,
  c.id,
  $4,
  $5
FROM user_pokemons up
JOIN chats c ON up.id = c.user_pokemon_id
WHERE up.user_id = $2
  AND up.pokemon_id = $3
`

type InsertChatHistoryParams struct {
	ID        uuid.UUID
	UserID    uuid.UUID
	PokemonID int32
	Sender    string
	Message   string
}

func (q *Queries) InsertChatHistory(ctx context.Context, arg InsertChatHistoryParams) error {
	_, err := q.db.ExecContext(ctx, insertChatHistory,
		arg.ID,
		arg.UserID,
		arg.PokemonID,
		arg.Sender,
		arg.Message,
	)
	return err
}
